name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create dummy .env file for testing
      run: |
        cp .env.example .env
        
    - name: Test with pytest
      run: |
        pytest --cov=./ --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check formatting with black
      run: |
        black --check .
        
    - name: Check imports with isort
      run: |
        isort --check-only --profile black .

  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run tests
      run: |
        cd frontend
        npm test -- --passWithNoTests
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    name: Deploy
    needs: [test, lint, build-and-test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    # Configuration pour le d√©ploiement sur DigitalOcean (exemple)
    - name: Install Doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/assistant-auto-backend:${{ github.sha }}
        
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/assistant-auto-frontend:${{ github.sha }}
        
    - name: Update deployment file
      run: |
        sed -i 's|image: .*assistant-auto-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/assistant-auto-backend:${{ github.sha }}|' kubernetes/backend-deployment.yaml
        sed -i 's|image: .*assistant-auto-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/assistant-auto-frontend:${{ github.sha }}|' kubernetes/frontend-deployment.yaml
        
    - name: Deploy to DigitalOcean Kubernetes
      run: |
        doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_NAME }}
        kubectl apply -f kubernetes/backend-deployment.yaml
        kubectl apply -f kubernetes/frontend-deployment.yaml
        kubectl apply -f kubernetes/service.yaml
        kubectl rollout restart deployment assistant-auto-backend
        kubectl rollout restart deployment assistant-auto-frontend
